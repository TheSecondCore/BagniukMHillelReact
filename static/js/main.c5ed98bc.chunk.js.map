{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startEdit","setState","isBeingEdited","onChange","e","editField","target","value","confirmEdit","preventDefault","state","editChild","parentNode","getAttribute","_this2","hideWhenEditing","display","showWhenEditing","react_default","a","createElement","data-index","index","style","item","onClick","onDelete","placeholder","type","onKeyDown","key","React","Component","App","inputField","onSubmit","items","concat","toConsumableArray","localStorage","setItem","JSON","stringify","newValue","newItems","splice","fetchJSON","_ref","asyncToGenerator","regenerator_default","mark","_callee","i","randomNumber","response","data","wrap","_context","prev","next","Math","floor","random","fetch","sent","json","stop","_x","apply","arguments","getItem","parse","textAlign","className","map","Todo_Todo","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5ed98bc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Todo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isBeingEdited: false,\r\n            editField: null,\r\n        }\r\n    }\r\n\r\n    startEdit = () => {\r\n        this.setState({\r\n            isBeingEdited: true\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ editField: e.target.value })\r\n    }\r\n\r\n    confirmEdit = (e) => {\r\n        e.preventDefault()\r\n        if (this.state.editField !== null) {\r\n            this.props.editChild(e.target.parentNode.getAttribute('data-index'), this.state.editField)\r\n        }\r\n        this.setState({ isBeingEdited: false })\r\n    }\r\n\r\n    render() {\r\n\r\n        const hideWhenEditing = { display: (this.state.isBeingEdited ? \"none\" : \"\") }\r\n        const showWhenEditing = { display: (this.state.isBeingEdited ? \"\" : \"none\") }\r\n\r\n        return (\r\n            <div data-index={this.props.index}>\r\n                <li style={hideWhenEditing}>\r\n                    {this.props.item}\r\n                </li>\r\n                <button onClick={this.props.onDelete}>X</button>\r\n                <button onClick={this.startEdit} style={hideWhenEditing}>Edit</button>\r\n                <input \r\n                    onChange={this.onChange} \r\n                    placeholder={this.props.item} \r\n                    style={showWhenEditing} \r\n                    type=\"text\"\r\n                    onKeyDown={(e) => (e.key === 'Enter' ? this.confirmEdit(e) : null)}  />\r\n                <button onClick={this.confirmEdit} style={showWhenEditing}>Confirm</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\nimport './App.css'\nimport Todo from './Todo'\nimport { async } from 'q';\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      inputField: '',\n      items: [],\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({ inputField: e.target.value })\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault()\n    this.setState({\n      inputField: '',\n      items: [...this.state.items, this.state.inputField]\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  editChild = (index, newValue) => {\n    let newItems = this.state.items\n    newItems[index] = newValue\n    this.setState({\n      items: newItems\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  onDelete = (e) => {\n    let newItems = this.state.items\n    newItems.splice(e.target.parentNode.getAttribute('data-index'), 1)\n    this.setState({\n      items: newItems\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('items') !== null) {\n      this.setState({ items: JSON.parse(localStorage.getItem('items')) })\n    }\n  }\n\n  fetchJSON = async (e) => {\n    e.preventDefault()\n    for (let i = 0; i < 10; i++) {\n      let randomNumber = Math.floor(Math.random() * 200 + 1)\n      let response = await fetch('https://jsonplaceholder.typicode.com/todos/' + randomNumber)\n      let data = await response.json()\n      this.setState({\n        items: [...this.state.items, data[\"title\"]]\n      }, () => {\n        localStorage.setItem('items', JSON.stringify(this.state.items))\n      })\n    }\n  }\n\n  render() {\n\n    return (\n\n      <div style={{textAlign: 'center'}}>\n        <form className=\"App\" onSubmit={this.onSubmit}>\n          <input value={this.state.inputField} onChange={this.onChange} />\n          <button>Submit</button>\n          <hr />\n          <button onClick={this.fetchJSON}>Load 10 random placeholder posts from JSONplaceholder</button>\n        </form>\n        <br/>\n        <div className=\"List\">\n          <ul>\n            {this.state.items.map((item, index) =>\n              <Todo\n                key={index}\n                editChild={this.editChild}\n                index={index}\n                item={item}\n                onDelete={this.onDelete} />\n            )}\n          </ul>\n        </div>\n      </div>\n\n    )\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}