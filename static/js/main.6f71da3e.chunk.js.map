{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startEdit","setState","isBeingEdited","onChange","e","editField","target","value","confirmEdit","preventDefault","state","editChild","parentNode","getAttribute","hideWhenEditing","display","showWhenEditing","react_default","a","createElement","data-index","index","style","item","onClick","onDelete","placeholder","type","React","Component","App","inputField","onSubmit","items","concat","toConsumableArray","localStorage","setItem","JSON","stringify","newValue","newItems","splice","fetchJSON","i","randomNumber","Math","floor","random","fetch","then","response","json","data","catch","error","console","log","getItem","parse","_this2","className","map","Todo_Todo","key","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f71da3e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Todo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isBeingEdited: false,\r\n            editField: null,\r\n        }\r\n    }\r\n\r\n    startEdit = () => {\r\n        this.setState({\r\n            isBeingEdited: true\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ editField: e.target.value })\r\n    }\r\n\r\n    confirmEdit = (e) => {\r\n        e.preventDefault()\r\n        if (this.state.editField !== null) {\r\n            this.props.editChild(e.target.parentNode.getAttribute('data-index'), this.state.editField)\r\n        }\r\n        this.setState({ isBeingEdited: false })\r\n    }\r\n\r\n    render() {\r\n\r\n        const hideWhenEditing = { display: (this.state.isBeingEdited ? \"none\" : \"\") }\r\n        const showWhenEditing = { display: (this.state.isBeingEdited ? \"\" : \"none\") }\r\n\r\n        return (\r\n            <div data-index={this.props.index}>\r\n                <li style={hideWhenEditing}>\r\n                    {this.props.item}\r\n                </li>\r\n                <button onClick={this.props.onDelete}>X</button>\r\n                <button onClick={this.startEdit} style={hideWhenEditing}>Edit</button>\r\n                <input onChange={this.onChange} placeholder={this.props.item} style={showWhenEditing} type=\"text\" />\r\n                <button onClick={this.confirmEdit} style={showWhenEditing}>Confirm</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\nimport './App.css'\nimport Todo from './Todo'\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      inputField: '',\n      items: [],\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({ inputField: e.target.value })\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault()\n    this.setState({\n      inputField: '',\n      items: [...this.state.items, this.state.inputField]\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  editChild = (index, newValue) => {\n    let newItems = this.state.items\n    newItems[index] = newValue\n    this.setState({\n      items: newItems\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  onDelete = (e) => {\n    let newItems = this.state.items\n    newItems.splice(e.target.parentNode.getAttribute('data-index'), 1)\n    this.setState({\n      items: newItems\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('items') !== null) {\n      this.setState({ items: JSON.parse(localStorage.getItem('items')) })\n    }\n  }\n\n  fetchJSON = (e) => {\n    e.preventDefault()\n    for (let i = 0; i < 10; i++) {\n      let randomNumber = Math.floor(Math.random() * 200 + 1)\n      fetch('https://jsonplaceholder.typicode.com/todos/' + randomNumber)\n        .then(response => {\n          response.json()\n            .then(data => {\n              this.setState({\n                items: [...this.state.items, data[\"title\"]]\n              }, () => {\n                localStorage.setItem('items', JSON.stringify(this.state.items))\n              })\n            })\n        })\n        .catch(error => console.log(\"There was an error with the fetch request: \", error))\n    }\n  }\n\n  render() {\n\n    return (\n\n      <div>\n        <form className=\"App\" onSubmit={this.onSubmit}>\n          <input value={this.state.inputField} onChange={this.onChange} />\n          <button>Submit</button>\n          <hr />\n          <button onClick={this.fetchJSON}>Load 10 random placeholder posts from JSONplaceholder</button>\n        </form>\n        <div className=\"List\">\n          <ul>\n            {this.state.items.map((item, index) =>\n              <Todo\n                key={index}\n                editChild={this.editChild}\n                index={index}\n                item={item}\n                onDelete={this.onDelete} />\n            )}\n          </ul>\n        </div>\n      </div>\n\n    )\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}