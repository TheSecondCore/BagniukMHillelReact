{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","react_default","a","createElement","className","items","map","item","index","key","data-key","onClick","onDelete","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","inputField","target","value","onSubmit","preventDefault","concat","toConsumableArray","state","localStorage","setItem","JSON","stringify","newItems","splice","getAttribute","fetchJSON","i","randomNumber","Math","floor","random","fetch","then","response","json","data","catch","error","console","log","getItem","parse","src_List","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAmBeA,SAjBF,SAACC,GAAD,OACTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,UAEIH,EAAMK,MAAMC,IAAI,SAACC,EAAMC,GAAP,OACZP,EAAAC,EAAAC,cAAA,OAAKM,IAAKD,GACNP,EAAAC,EAAAC,cAAA,UAAKI,GACLN,EAAAC,EAAAC,cAAA,UAAQO,WAAUF,EAAOG,QAASX,EAAMY,UAAxC,KACAX,EAAAC,EAAAC,cAAA,UAAQO,WAAUF,GAAlB,eCNKK,cAEnB,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,SAAW,SAACC,GACVR,EAAKS,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SATzBZ,EAYba,SAAW,SAACL,GACVA,EAAEM,iBACFd,EAAKS,SAAS,CACZC,WAAa,GACbnB,MAAK,GAAAwB,OAAAd,OAAAe,EAAA,EAAAf,CAAMD,EAAKiB,MAAM1B,OAAjB,CAAwBS,EAAKiB,MAAMP,cACvC,WACDQ,aAAaC,QAAQ,QAASC,KAAKC,UAAUrB,EAAKiB,MAAM1B,WAlB/CS,EAsBbF,SAAW,SAACU,GACV,IAAIc,EAAWtB,EAAKiB,MAAM1B,MAC1B+B,EAASC,OAAOf,EAAEG,OAAOa,aAAa,YAAY,GAClDxB,EAAKS,SAAS,CACZlB,MAAQ+B,GACP,WACDJ,aAAaC,QAAQ,QAASC,KAAKC,UAAUrB,EAAKiB,MAAM1B,WA5B/CS,EAsCbyB,UAAY,SAACjB,GACXA,EAAEM,iBACF,IAAK,IAAIY,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GACpDC,MAAM,8CAAgDJ,GACnDK,KAAK,SAAAC,GACJA,EAASC,OACRF,KAAK,SAAAG,GACJnC,EAAKS,SAAS,CACZlB,MAAK,GAAAwB,OAAAd,OAAAe,EAAA,EAAAf,CAAOD,EAAKiB,MAAM1B,OAAlB,CAAyB4C,EAAI,SACjC,WACDjB,aAAaC,QAAQ,QAASC,KAAKC,UAAUrB,EAAKiB,MAAM1B,cAI7D6C,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,8CAA+CF,OAnD/ErC,EAAKiB,MAAQ,CACXP,WAAa,GACbnB,MAAQ,IAJCS,mFAiC2B,OAAlCkB,aAAasB,QAAQ,UACvBrC,KAAKM,SAAS,CAAClB,MAAQ6B,KAAKqB,MAAMvB,aAAasB,QAAQ,6CAyBzD,OAEErD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAMuB,SAAUV,KAAKU,UACnC1B,EAAAC,EAAAC,cAAA,SAAOuB,MAAOT,KAAKc,MAAMP,WAAYH,SAAUJ,KAAKI,WACpDpB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQQ,QAASM,KAAKsB,WAAtB,0DAEFtC,EAAAC,EAAAC,cAACqD,EAAD,CAAMnD,MAAOY,KAAKc,MAAM1B,MAAOO,SAAUK,KAAKL,mBAtErB6C,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.b62c5d7e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst List = (props) => (\r\n    <div className=\"List\">\r\n    <ul>\r\n      {\r\n        props.items.map((item, index) => \r\n            <div key={index}>\r\n                <li>{item}</li>\r\n                <button data-key={index} onClick={props.onDelete}>X</button>\r\n                <button data-key={index}>Edit</button>\r\n            </div>\r\n        )\r\n      }\r\n    </ul>\r\n    \r\n    </div>\r\n)\r\n\r\nexport default List","import React, {Component} from 'react'\nimport './App.css'\nimport List from './List'\n\nexport default class App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      inputField : '',\n      items : [],\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({inputField: e.target.value})\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault()\n    this.setState({\n      inputField : '',\n      items: [...this.state.items, this.state.inputField]\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  onDelete = (e) => {\n    let newItems = this.state.items\n    newItems.splice(e.target.getAttribute('data-key'),1)\n    this.setState({\n      items : newItems\n    }, () => {\n      localStorage.setItem('items', JSON.stringify(this.state.items))\n    })\n  }\n\n  componentDidMount () {\n    if (localStorage.getItem('items') !== null) {\n      this.setState({items : JSON.parse(localStorage.getItem('items'))})\n    }\n  }\n\n  fetchJSON = (e) => {\n    e.preventDefault()\n    for (let i = 0; i < 10; i++) {\n      let randomNumber = Math.floor(Math.random() * 200 + 1)\n      fetch('https://jsonplaceholder.typicode.com/todos/' + randomNumber)\n        .then(response => {\n          response.json()\n          .then(data =>{\n            this.setState({\n              items : [...this.state.items, data[\"title\"]]\n            }, () => {\n              localStorage.setItem('items', JSON.stringify(this.state.items))\n            })\n          })\n        })\n        .catch(error => console.log(\"There was an error with the fetch request: \", error))\n    }\n  }\n\n\n  render () {\n    return(\n\n      <div>\n        <form className=\"App\" onSubmit={this.onSubmit}>\n          <input value={this.state.inputField} onChange={this.onChange} />\n          <button>Submit</button>\n          <hr></hr>\n          <button onClick={this.fetchJSON}>Load 10 random placeholder posts from JSONplaceholder</button>\n        </form>\n        <List items={this.state.items} onDelete={this.onDelete} />\n      </div>\n\n    )\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}